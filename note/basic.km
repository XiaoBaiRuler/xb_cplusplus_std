{
    "root": {
        "data": {
            "id": "civz7gdch200",
            "created": 1648518979716,
            "text": "C++"
        },
        "children": [
            {
                "data": {
                    "id": "civziv7ij0o0",
                    "created": 1648519874021,
                    "text": "预处理器",
                    "priority": 1,
                    "note": "1. 类似C的\n#define...\n#include\n2. using\nusing namespace std;\nusing namespace::name;\nusing double = x;"
                },
                "children": []
            },
            {
                "data": {
                    "id": "civzy77bpzc0",
                    "created": 1648521075593,
                    "text": "常量",
                    "font-weight": "bold",
                    "priority": 1,
                    "expandState": "collapse"
                },
                "children": [
                    {
                        "data": {
                            "id": "ciw1108ilcw0",
                            "created": 1648524116630,
                            "text": "整型",
                            "font-weight": "bold",
                            "note": "- 10\n- 017\n- 0x1a",
                            "priority": 4
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgp9wmm5cds0",
                            "created": 1640525926935,
                            "text": "字符和字符串",
                            "priority": 2,
                            "font-weight": "bold",
                            "note": "- **字符串/C风格字符串: 带前缀表示使用字符**\n- 常用转义字符\n\t- \\n \\r\n    ",
                            "expandState": "expand"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgp9ygx3ag00",
                                    "created": 1640526071265,
                                    "text": "字符前缀",
                                    "priority": 3,
                                    "expandState": "collapse"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "cgp9z2hrqxs0",
                                            "created": 1640526118227,
                                            "text": "u'a': char16_t ",
                                            "font-weight": "bold"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cgp9zk1w9m80",
                                            "created": 1640526156450,
                                            "text": "U'a': char32_t",
                                            "font-weight": "bold"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cgp9zv3hoiw0",
                                            "created": 1640526180491,
                                            "text": "u8'a': UTF-8",
                                            "font-weight": "bold"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cgpa03j518g0",
                                            "created": 1640526198851,
                                            "text": "L'a': wchar_t",
                                            "font-weight": "bold"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cgp9wqlzsag0",
                            "created": 1640525935633,
                            "text": "浮点型",
                            "expandState": "expand",
                            "font-weight": "bold",
                            "priority": 4,
                            "note": "- float: 123.2f\n- long double: 123.2L"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgp9wsvbank0",
                            "created": 1640525940550,
                            "text": "指针字面值: nullptr",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "与NULL的区别\n- NULL int 0 4个字节\n- nullptr void * 8个字节"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "ciw15y6nzxk0",
                    "created": 1648524503986,
                    "text": "类型",
                    "font-weight": "bold",
                    "priority": 1,
                    "expandState": "collapse"
                },
                "children": [
                    {
                        "data": {
                            "id": "cgp9i2lqaow0",
                            "created": 1640524786276,
                            "text": "算术类型",
                            "priority": 2,
                            "expandState": "collapse"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgp9i5s9go00",
                                    "created": 1640524793201,
                                    "text": "bool[1]",
                                    "priority": 3
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgp9iaqvaoo0",
                                    "created": 1640524804001,
                                    "text": "字符型",
                                    "note": "- char[1]\n- wchar_t[2]\n- char16_t[2]\n- char32_t[4]",
                                    "priority": 3
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgp9islbeag0",
                                    "created": 1640524842847,
                                    "text": "整型",
                                    "note": "- short[2]\n- int[2]\n- long[4]\n- long long[8]",
                                    "priority": 3
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgp9jb4rvo00",
                                    "created": 1640524883206,
                                    "text": "浮点型",
                                    "note": "- float[6位有效数字]\n- double[10位有效数字]\n- long double",
                                    "priority": 3
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgp9plwi2cg0",
                                    "created": 1640525376835,
                                    "text": "是否有符号",
                                    "note": "- signed\n- unsigned",
                                    "priority": 3
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cgp9i94v6vc0",
                            "created": 1640524800494,
                            "text": "void: 空类型",
                            "priority": 2,
                            "font-weight": "bold"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgp9qrgb3vc0",
                            "created": 1640525467281,
                            "text": "数据溢出",
                            "priority": 2,
                            "expandState": "expand",
                            "note": "1. 无符号溢出，结果为初始值对总数的余数\n2. 有符号溢出，结果为未定义\n3. 大范围 -> 小范围: 出现精度丢失"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "ciw19aetnts0",
                    "created": 1648524765693,
                    "text": "变量",
                    "font-weight": "bold",
                    "priority": 1,
                    "note": "- 变量定义: 类型说明符 + 变量名\n- 什么是对象：具有某种数据类型的内存空间",
                    "expandState": "collapse"
                },
                "children": [
                    {
                        "data": {
                            "id": "cgqwyjskptc0",
                            "created": 1640692523006,
                            "text": "初始化",
                            "expandState": "collapse",
                            "font-weight": "bold",
                            "priority": 2
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgqwynu7irc0",
                                    "created": 1640692531812,
                                    "text": "默认初始化",
                                    "expandState": "expand",
                                    "note": "- 函数体之外:初始化为0\n- 函数体之内:未定义",
                                    "priority": 3,
                                    "font-weight": "bold"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgqxtkyhoo00",
                                    "created": 1640694954830,
                                    "text": "列表初始化",
                                    "note": "int a = {0};\nint b{0};\n\n//如果列表初始化且初始值存在丢失信息的风险，则编译器将报错\n// int a = {0, 1};\n",
                                    "expandState": "expand",
                                    "priority": 3,
                                    "font-weight": "bold"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgqwxf610zk0",
                                    "created": 1640692434572,
                                    "text": "初始化和赋值的区别",
                                    "expandState": "expand",
                                    "layout_right_offset": {
                                        "x": -8,
                                        "y": 5
                                    },
                                    "font-weight": "bold",
                                    "priority": 3,
                                    "note": "1. 初始化：创建变量时赋予一个初始值\n2. 赋值：把对象的当前值擦除，以一个新值替代"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cgqyc5igya80",
                            "created": 1640696410129,
                            "text": "作用域: 以{}分割",
                            "font-weight": "bold",
                            "expandState": "expand",
                            "priority": 3,
                            "note": "- 允许在内层作用域中重新定义外层作用域已有的名字"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgqye9pury00",
                            "created": 1640696576011,
                            "text": "引用",
                            "font-weight": "bold",
                            "expandState": "expand",
                            "priority": 2,
                            "note": "1. **为对象起的别名[不是对象]，引用将和它的初始值对象绑定在一起，无法更改**\n  - 指针也是对象\n  => 存在指针的引用\n  int i = 42;\n  int *p = &i;\n  // 从右往左读(离变量名越近的符号，最直接影响变量类型)\n  int *&r = p;\n\n2. **必须初始化，且引用的类型和与之绑定的对象要严格匹配**"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgqz2eko4rs0",
                            "created": 1640698467321,
                            "text": "指针",
                            "font-weight": "bold",
                            "expandState": "collapse",
                            "priority": 2
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgqzhzhtj4w0",
                                    "created": 1640699688324,
                                    "text": "指针值",
                                    "font-weight": "bold",
                                    "expandState": "expand",
                                    "note": "1. 指向一个对象\n2. 指向相邻对象所占空间的下一位置\n3. nullptr",
                                    "priority": 3
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgqz3utffw00",
                                    "created": 1640698581043,
                                    "text": "对象，可以赋值，拷贝等",
                                    "font-weight": "bold",
                                    "priority": 3,
                                    "expandState": "expand",
                                    "note": "void*：特殊的指针类型，可以存放任意对象的地址"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgqzgg0v3rc0",
                                    "created": 1640699567575,
                                    "text": "不必要初始化(未初始化为未定义值)，但是类型必须和所指对象类型一致",
                                    "font-weight": "bold",
                                    "priority": 3
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "ciw1iz8al880",
                    "created": 1648525524995,
                    "text": "关键字",
                    "font-weight": "bold",
                    "priority": 1,
                    "expandState": "collapse"
                },
                "children": [
                    {
                        "data": {
                            "id": "cgsc289nmy80",
                            "created": 1640836687980,
                            "text": "const",
                            "font-weight": "bold",
                            "priority": 2,
                            "expandState": "collapse",
                            "note": "1. 定义常量，必须初始化，且不能改变"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgyn9oxc00g0",
                                    "created": 1641477664738,
                                    "text": "修饰复合类型",
                                    "priority": 3,
                                    "expandState": "collapse"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "cgyn62mbd6w0",
                                            "created": 1641477381090,
                                            "text": "对常量的引用：",
                                            "font-weight": "bold",
                                            "note": "- 不能修改；但是能够用任意表达式作为初始值\n-当常量引用绑定不同类型时，会绑定一个临时量对象，编译器用来缓存表达式结果",
                                            "layout_right_offset": {
                                                "x": 4,
                                                "y": -6
                                            },
                                            "priority": 4
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cgynabv7nsw0",
                                            "created": 1641477714676,
                                            "text": "指向常量的指针",
                                            "font-weight": "bold",
                                            "note": "不能改变对象的值，但可以允许一个指向常量的指针指向一个非常量的值",
                                            "priority": 4
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cgyncparre80",
                                            "created": 1641477900643,
                                            "text": "常量指针",
                                            "font-weight": "bold",
                                            "priority": 4,
                                            "note": "- 指针为常量类型，必须初始化，且不能改变；但指向的值如果不是常量可以改变"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "cgyndudefb40",
                                    "created": 1641477990050,
                                    "text": "层级",
                                    "priority": 3,
                                    "expandState": "collapse",
                                    "note": "# 1\nint a(int &a, int &b){\n    return a + b;\n}\n// 底层\nint a(const int & a, const int & b){\n    return a + b;\n}\n\n# 2\nint a(int *a, int *b){\n    return *a + *b;\n}\n// 底层\nint a(const int *a, const int *b){\n    return *a + *b;\n}\n# 3 冲突\nint a(int a, int b){\n    return a + b;\n}\n// 高层 \nint a(const int a, const int b){\n    return a + b;\n}"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "cgyne0i0h280",
                                            "created": 1641478003390,
                                            "text": "顶层const：本身是一个常量",
                                            "font-weight": "bold",
                                            "note": "int i = 0;\n[const] int ci = 42;\nint *[const] pi = &i;\nconst int *[const] p3 = &ci;\n//指针 可以顶层也可以底层",
                                            "priority": 4
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cgyne10iwww0",
                                            "created": 1641478004509,
                                            "text": "底层const：指针所指向的对象是一个常量",
                                            "font-weight": "bold",
                                            "note": "[const] int *p2 = &ci;\n[const] int *const p3 = p2;\nconst int &b = a;\n//引用都是底层const",
                                            "priority": 4
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cgynif2e0ag0",
                                            "created": 1641478348553,
                                            "text": "拷入拷出规则 ",
                                            "priority": 4,
                                            "font-weight": "bold",
                                            "note": "- 拷入和拷出的对象必须具有相同的底层const，或者可以转化[非常量可以转为常量]"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cgynk5lghnk0",
                            "created": 1641478484667,
                            "text": "constexpr",
                            "priority": 2,
                            "font-weight": "bold",
                            "expandState": "collapse",
                            "note": "1. 常量表达式：值不会改变，且在编译阶段就可以得到结果\n- 字面值\n- 用常量表达式初始化的const对象"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgynlmzg1z40",
                                    "created": 1641478600882,
                                    "text": "[C11]: constexpr声明，编译阶段验证是否为表达式(常量)",
                                    "priority": 3,
                                    "font-weight": "bold",
                                    "note": "1. nullptr\n2. 0\n3. 固定地址中的对象\n[如果声明中定义了一个指针，constexpr仅对指针有效，与所指的对象无关]\nint i = 1, j = 2;\nint main(){\n    constexpr int* function = &i;\n    // 可以\n    ++ i;\n    // 不行 且funciton变成右值了\n    //function = &j;\n    cout << i << endl;\n    return EXIT_SUCCESS;\n}\n**定义在函数体内的变量并不存放在固定地址中，不能用来初始化constexpr，而定义在函数体外的地址固定不变，可以用来初始化constexpr指针**"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cixxksvfdig0",
                            "created": 1648717503358,
                            "text": "explicit",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "- 阻止隐式使用，eg：explict构造函数中，必须显式调用"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cizlrig4dco0",
                            "created": 1648887295809,
                            "text": "friend",
                            "font-weight": "bold",
                            "priority": 2
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cizmcw0lbfk0",
                            "created": 1648888970992,
                            "text": "noexcept",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "- 通知标准库当前构造函数不抛出异常\n"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "ciw1jnk2bbc0",
                    "created": 1648525577949,
                    "text": "STD",
                    "priority": 1,
                    "expandState": "collapse",
                    "font-weight": "bold",
                    "layout_right_offset": {
                        "x": 0,
                        "y": -5
                    }
                },
                "children": [
                    {
                        "data": {
                            "id": "ciw5fszxfq00",
                            "created": 1648536560776,
                            "text": "IO类型",
                            "priority": 1,
                            "font-weight": "bold",
                            "expandState": "collapse",
                            "note": "## 流iostream\n\t- iostream/istream/ostream\n    - wiostream/wistream/wostream\n## 文件fstream\n\t- fstream/ifstream/ofstream\n    - wfstream/wifstream/wofstream\n## 字符串sstream\n\t- stringstream/istringstream/ostringstream\n    - wstringstream/wistringstream/wostringstream\n\n## 类型对象操作\n- **IO对象无拷贝或赋值**\n- "
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ciw6zy4bdlk0",
                                    "created": 1648540960318,
                                    "text": "fstream",
                                    "font-weight": "bold",
                                    "priority": 2,
                                    "note": "- fstream f(\"sss.txt\");\n- fstream f(\"sss.txt\", xx_mode | xx_mode);\n\t- in 读\n    - out 写(默认截断)\n    - app 每次写头定位到文件末尾(没有app模式就行)\n    - ate 打开文件后立即定位到文件末尾\n    - trunc 截断文件(必须out模式)\n    - binary 以二进制方式打开\n- f.open(\"xxx.txt\");\n- f.open(\"xxx.txt\", xx_mode);\n- f.is_open();\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ciw85wu4iy00",
                                    "created": 1648544248820,
                                    "text": "sstream",
                                    "priority": 2,
                                    "font-weight": "bold",
                                    "note": "- sstream ss(s);\n- ss.str(); 返回strm所保存的拷贝\n- void ss.str(s); 将s拷贝到strm中"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cixnbsb9nt40",
                            "created": 1648688585763,
                            "text": "有序容器",
                            "font-weight": "bold",
                            "priority": 1,
                            "expandState": "collapse",
                            "note": "- 都支持关系运算符，eg: > < >= == "
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ciwfohb9sc80",
                                    "created": 1648565451717,
                                    "text": "array",
                                    "font-weight": "bold",
                                    "priority": 1,
                                    "note": "- size()\n- max_size()\n- empty()",
                                    "expandState": "collapse"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "ciwfubyu5i80",
                                            "created": 1648565910266,
                                            "text": "初始化",
                                            "priority": 2,
                                            "note": "1. 默认初始化 \narray<int, 10> a;\n2. 列表初始化\narray<int, 10> b{0};\narray<int, 10> c = {0};\n3. 拷贝初始化\narray<int, 10> d(b);\n"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwg4pidd280",
                                            "created": 1648566723387,
                                            "text": "赋值和交换",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 赋值(限定元素个数一样)\nlist<int> a, b;\nb = {1, 2, 3};\na = b;\n\n#### 2. 交换(限定元素个数一样)\na.swap(b);\nswap(a, b);\n"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciww2prm6wg0",
                                            "created": 1648611704976,
                                            "text": "遍历",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. iterator\n// const_iterator \n// cbegin(), cend()\n\n// iterator \n// begin(), end()\n#### 2. reverse_iterator\n// const_reverse_iterator\n// crbegin(), crend()\n// reverse_iterator\n// rbegin(), rend()\n#### 3. for遍历\nfor (int &i : b){\n}\n#### 4. 下标遍历\nint n = b.size();\nfor (int i = 0; i < n; ++ i){\n\tcout << b[i] << endl;\n}"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cix0rwbb4ds0",
                                            "created": 1648624962771,
                                            "text": "操作",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "- fill()\n"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "ciwfobdh3e00",
                                    "created": 1648565438789,
                                    "text": "forward_list",
                                    "font-weight": "bold",
                                    "priority": 1,
                                    "note": "- resize()\n- empty()\n- max_size()",
                                    "expandState": "collapse"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "ciwfubyu5i80",
                                            "created": 1648565910266,
                                            "text": "构造函数",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "1. 默认初始化 \n- forward_list<int> val1;\n2. 拷贝初始化\n- forward_list<int> val2(val1);\n3. 范围初始化\n- forward_list<int> val3(val1.begin(), val1.end());\n4. 列表初始化\n- forward_list<int> val4{1, 2, 3};\n- forward_list<int> val5 = {1, 2, 3};\n5. 初始化n个\n- forward_list<int> val6(n, 1);"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwg4pidd280",
                                            "created": 1648566723387,
                                            "text": "赋值和交换",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 赋值(不限定元素个数一样)\nlist<int> a, b;\nb = {1, 2, 3};\na = b;\n\n#### 2. 交换(不限定元素个数一样)\na.swap(b);\nswap(a, b);\n"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwgcawe5y00",
                                            "created": 1648567318497,
                                            "text": "增删改",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 增\n1. push_front(args)\n- 在前面插入args\n2. insert_after(iterator, args)\n- 在iterator后面添加args\n3. emplace_after(iterator, 1);\n- 使用inits在iterator后构造一个元素\n4. emplace_front(args); \n#### 2. 删\n1. erase_after(it); 删除it后的元素\n2. pop_front(); 删除前面元素\n2. clear(); 清空整个deque\n#### 3. 改\nlist<int> a = {1};\na.front();\n// 或者迭代器修改"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciww2prm6wg0",
                                            "created": 1648611704976,
                                            "text": "遍历",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. iterator\n// const_iterator \n// cbegin(), cend()\n// cbefore_begin()\n\n// iterator \n// begin(), end()\n// before_begin()\n#### 2. for遍历\nfor (int &i : b){\n}"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cix0rwbb4ds0",
                                            "created": 1648624962771,
                                            "text": "操作",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "1. splice_after()\n2. remove()\n3. remove_if()\n4. unique()\n5. merge()\n6. sort()\n7. reverse()"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "ciwfnkpdvts0",
                                    "created": 1648565380736,
                                    "text": "list",
                                    "font-weight": "bold",
                                    "priority": 1,
                                    "note": "- empty();\n- size();\n- max_size();",
                                    "expandState": "collapse"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "ciwfubyu5i80",
                                            "created": 1648565910266,
                                            "text": "构造函数",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "1. 默认初始化 \n- list<int> val1;\n2. 拷贝初始化\n- list<int> val2(val1);\n3. 范围初始化\n- list<int> val3(val1.begin(), val1.end());\n4. 列表初始化\n- list<int> val4{1, 2, 3};\n- list<int> val5 = {1, 2, 3};\n5. 初始化n个\n- list<int> val6(n, 1);"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwg4pidd280",
                                            "created": 1648566723387,
                                            "text": "赋值和交换",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 赋值(不限定元素个数一样)\nlist<int> a, b;\nb = {1, 2, 3};\na = b;\n\n#### 2. 交换(不限定元素个数一样)\na.push_back(1);\nb.push_back(3);\na.swap(b);\nswap(a, b);\n"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwgcawe5y00",
                                            "created": 1648567318497,
                                            "text": "增删改",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 增\n1. push_back(args)\n- 在末尾添加args\n2. push_front(args)\n- 在前面插入args\n2. insert(iterator, args)\n- 在iterator后面添加args\n3. insert(iterator, 2, args);\n- 在iterator后面添加2个args\n4. emplace(iterator, 1);\n- 使用inits在iterator下构造一个元素\n5. emplace_front(args); \n6. emplace_back(args);\n#### 2. 删\n1. erase(iterator); 删除当前元素\n2. pop_back();\n3. pop_front();\n2. clear(); 清空整个deque\n#### 3. 改\nlist<int> a = {1};\na.front();\na.back();\n// 或者迭代器修改"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciww2prm6wg0",
                                            "created": 1648611704976,
                                            "text": "遍历",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. iterator\n// const_iterator \n// cbegin(), cend()\n// iterator \n// begin(), end()\n#### 2. 倒序遍历\n// const_reverse_iterator\n// crbegin(), crend()\n// reverse_iterator\n// cbegin(), cend()\n#### 3. for遍历\nfor (int &i : b){\n}"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cix0rwbb4ds0",
                                            "created": 1648624962771,
                                            "text": "操作",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "1. splice\n2. remove()\n3. remove_if()\n4. unique()\n5. merge()\n6. sort()\n7. reverse()"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "ciwfn5f0mlk0",
                                    "created": 1648565347458,
                                    "text": "vector",
                                    "priority": 1,
                                    "font-weight": "bold",
                                    "note": "- .size() 元素个数\n- .max_size() 可保存的最大数目\n- .empty() 是否为空\n- .resize() 设置初始空间\n- .shrink_to_fit() 去掉多余的空间",
                                    "expandState": "collapse"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "ciwfubyu5i80",
                                            "created": 1648565910266,
                                            "text": "构造函数",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "1. 默认初始化 \n- vector<int> val1;\n2. 拷贝初始化\n- vector<int> val2(val1);\n3. 范围初始化\n- vector<int> val3(val1.begin(), val1.end());\n4. 列表初始化\n- vector<int> val4{1, 2, 3};\n- vector<int> val5 = {1, 2, 3};\n5. 初始化n个\n- vector<int> val6(n, 1);"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwg4pidd280",
                                            "created": 1648566723387,
                                            "text": "赋值和交换",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 赋值(不限定元素个数一样)\nvector<int> a, b;\nb = {1, 2, 3};\na = b;\n\n#### 2. 交换(不限定元素个数一样)\na.push_back(1);\nb.push_back(3);\na.swap(b);\nswap(a, b);\n"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwgcawe5y00",
                                            "created": 1648567318497,
                                            "text": "增删改",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 增\n1. push_back(args)\n- 在末尾添加args\n2. insert(iterator, args)\n- 在iterator后面添加args\n3. insert(iterator, 2, args);\n- 在iterator后面添加2个args\n4. emplace(iterator, 1);\n- 使用inits在iterator下构造一个元素\n#### 2. 删\n1. erase(iterator); 删除当前元素\n2. clear(); 清空整个vector\n#### 3. 改\nvector<int> a = {1};\na[0] = 2;\n// 或者迭代器修改"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciww2prm6wg0",
                                            "created": 1648611704976,
                                            "text": "遍历",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 下标遍历\nint n = b.size();\nfor (int i = 0; i < n; ++ i){\n\tcout << b[i] << endl;\n}\n#### 2. iterator\n// const_iterator \n// cbegin(), cend()\n// iterator \n// begin(), end()\n#### 2. 倒序遍历\n// const_reverse_iterator\n// crbegin(), crend()\n// reverse_iterator\n// cbegin(), cend()\n#### 4. for遍历\nfor (int &i : b){\n}"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cixoyc9ub1s0",
                                            "created": 1648693174334,
                                            "text": "priority_queue",
                                            "priority": 1,
                                            "font-weight": "bold",
                                            "note": "- pop()\n- front()\n- back()\n- top()\n- push()\n- emplace()"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "ciw1jsz4n7s0",
                                    "created": 1648525589744,
                                    "text": "string",
                                    "font-weight": "bold",
                                    "priority": 1,
                                    "expandState": "collapse",
                                    "note": "## 1. 字符串和数字之间转换\n\n### 1. 转字符串\n- to_string()\n\n### 2. 转数字\n- stoi()/stol()/stoll() 有符号整数\n- stoul()/stoull() 无符号\n- stof()/stod()/stold() 浮点"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "chet1qjjsv40",
                                            "created": 1643118927311,
                                            "text": "定义和初始化",
                                            "font-weight": "bold",
                                            "note": "// 默认初始化空字符串\nstring s1;\n// 以s1初始化\nstring s2(s1);\nstring s3 = s1;\n// 以字面值初始化(除开空字符)\nstring s4 = \"value\";\nstring s5(\"value\");\n// 连续以n个字符x初始化\nstring s6(n, 'x');\n// char \\* 前n个字符的拷贝\nstring s7(cp, n);\n// 从pos2下标开始的字符的拷贝\nstring s8(s1, pos2);\n// 从pos2下标开始len2个字符的拷贝\nstring s9(s1, pos2, len2);",
                                            "priority": 2
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "chetby03g8g0",
                                            "created": 1643119727191,
                                            "text": "操作",
                                            "font-weight": "bold",
                                            "note": "string s = \"abs\";\n// 1. 实现operator<<\ncout << s << endl;\n// 2. 实现operator>>\ncin >> s;\n// 3. 获取一行数据\ngetline(cin, s);\n// 4. 是否为空\ns.empty();\n// 5. 字符个数\ns.size();\n// 6. 索引访问实现operator[]\ns[i];\n// 7. 赋值\ns1 = s2;\n// 8. 判断相等\ns1 == s2;\n// 9. 比较大小, 越少字符越小\ns1 > s2;\ns2 <= s2;\n// 10. 链接字符串opertor+\ns = s + \"a\" + \"c\";\n// **注意：以下为错误的**\n// ** 从左往右，每两个组合到第一个**\ns = \"a\" + \"c\" + s1;",
                                            "priority": 2,
                                            "expandState": "collapse"
                                        },
                                        "children": [
                                            {
                                                "data": {
                                                    "id": "cixnhryuk680",
                                                    "created": 1648689055197,
                                                    "text": "增删改查",
                                                    "font-weight": "bold",
                                                    "priority": 3,
                                                    "note": "#### 1. 增\n- push_back(char);\n- insert(index/iterator, string);\n- append(string);\n#### 2. 删\n- erase(index, iterator, size);\n- erase(index, iterator) 删除后面所有\n#### 3. 改\n- 替换11开始3个字符为abc\n- replace(11, 3, \"abc\");\n- a[index] = 'c';\n- (\\*a.begin()) = 'd';\n#### 4. 查\n- .find(string) \n\t- 返回开始下标\n    - string::npos\n- .rfind(stiring)\n- .find_fist_of(string)\n- .find_last_of(string)\n- .find_first_not_of(string)\n- .find_last_not_of(string)"
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "data": {
                                            "id": "ci1rplgp3zs0",
                                            "created": 1645451033778,
                                            "text": "cctype",
                                            "font-weight": "bold",
                                            "note": "1. 封装了C的ctype.h的函数\n2. ctype.h中的操作字符函数是用宏定义实现的",
                                            "priority": 2
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwfjs8wwmo0",
                                            "created": 1648565083698,
                                            "text": "遍历",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. for循环\nstring s = \"abc\";\nfor (char c : s){\n\tcout << c << endl;\n}\n// 可以改变值\nfor (char &c : s){\n\tcout << c << endl;\n}\n#### 2. 下标遍历\nstring s = \"abc\";\nsize_t n = s.size();\n// 可以改变值\nfor (int i = 0; i < n; ++ i){\n\tcout << s[i] << endl;\n}"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "ciwfnfsktl40",
                                    "created": 1648565370045,
                                    "text": "deque",
                                    "font-weight": "bold",
                                    "priority": 1,
                                    "note": "- .max_size() 可保存的最大数目\n- .empty() 是否为空\n- .resize() 设置初始空间\n- .shrink_to_fit() 去掉多余的空间",
                                    "expandState": "collapse"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "ciwfubyu5i80",
                                            "created": 1648565910266,
                                            "text": "构造函数",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "1. 默认初始化 \n- deque<int> val1;\n2. 拷贝初始化\n- deque<int> val2(val1);\n3. 范围初始化\n- deque<int> val3(val1.begin(), val1.end());\n4. 列表初始化\n- deque<int> val4{1, 2, 3};\n- vector<int> val5 = {1, 2, 3};\n5. 初始化n个\n- deque<int> val6(n, 1);"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwg4pidd280",
                                            "created": 1648566723387,
                                            "text": "赋值和交换",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 赋值(不限定元素个数一样)\ndeque<int> a, b;\nb = {1, 2, 3};\na = b;\n\n#### 2. 交换(不限定元素个数一样)\na.push_back(1);\nb.push_back(3);\na.swap(b);\nswap(a, b);\n"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciwgcawe5y00",
                                            "created": 1648567318497,
                                            "text": "增删改",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 增\n1. push_back(args)\n- 在末尾添加args\n2. push_front(args)\n- 在前面插入args\n2. insert(iterator, args)\n- 在iterator后面添加args\n3. insert(iterator, 2, args);\n- 在iterator后面添加2个args\n4. emplace(iterator, 1);\n- 使用inits在iterator下构造一个元素\n5. emplace_front(args); \n6. emplace_back(args);\n#### 2. 删\n1. erase(iterator); 删除当前元素\n2. pop_back();\n3. pop_front();\n2. clear(); 清空整个deque\n#### 3. 改\ndeque<int> a = {1};\nint it& = a[0] = 2;\na.at(0) = 3;\na.front();\na.back();\n// 或者迭代器修改"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "ciww2prm6wg0",
                                            "created": 1648611704976,
                                            "text": "遍历",
                                            "font-weight": "bold",
                                            "priority": 2,
                                            "note": "#### 1. 下标遍历\nint n = b.size();\nfor (int i = 0; i < n; ++ i){\n\tcout << b[i] << endl;\n}\n#### 2. iterator\n// const_iterator \n// cbegin(), cend()\n// iterator \n// begin(), end()\n#### 3. 倒序遍历\n// const_reverse_iterator\n// crbegin(), crend()\n// reverse_iterator\n// cbegin(), cend()\n#### 4. for遍历\nfor (int &i : b){\n}"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cixow6hgl280",
                                            "created": 1648693005005,
                                            "text": "stack",
                                            "font-weight": "bold",
                                            "priority": 1,
                                            "note": "- top()\n- push()\n- pop()\n- emplace()"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cixoxe3zxk80",
                                            "created": 1648693099970,
                                            "text": "queue",
                                            "priority": 1,
                                            "font-weight": "bold",
                                            "note": "- pop()\n- front()\n- back()\n- top()\n- push()\n- emplace()"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cixp027z2x40",
                            "created": 1648693309181,
                            "text": "泛型算法",
                            "font-weight": "bold",
                            "priority": 1,
                            "note": "#include <algorithm>\n#### 1. find\n- find(x.begin(), x.end(), val);\n\n#### 2. accumulate\n- accumulate(x.cbegin(), xcend());\n\n#### 3. equal\n- equal(a.cbegin(), a.cend(), b.cbegin(), a.cend());\n\n#### 4. back_inserter\n- 插入迭代器, 向后添加元素\n\tvector<int> vec;\n\tauto it = back_inserter(vec);\n    *it = 15;\n\n#### 5. copy\n- copy(a.begin(), a.begin(), b);\n\n#### 8. unique\n- unique(a.begin(), a.end());\n\n#### 9. sort\n- sort(a.begin(), a.end());\n\n#### 10. 补充\n- replace\n- replace_copy\n- find_if\n- for_each\n- bind"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cixpwehjylk0",
                            "created": 1648695843535,
                            "text": "关联容器",
                            "font-weight": "bold",
                            "priority": 1,
                            "layout_right_offset": {
                                "x": -6,
                                "y": -4
                            },
                            "note": "#### 有序\n- set\n- map\n#### 无序\n- unordered_set\n- unordered_map\n#### 可重复关键字\n- multiset\n- multimap\n- unordered_multiset\n- unordered_multimap",
                            "expandState": "collapse"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cixq8sy4hvs0",
                                    "created": 1648696815382,
                                    "text": "set类",
                                    "font-weight": "bold",
                                    "priority": 2,
                                    "note": "#### 1. 初始化\n\n- 默认 set<int> s1;\n- 列表初始化 set<int> s2 = {1, 2};\n\n#### 2. 添加\n\n- .insert(key)\n- .emplace(key) 只有在不存在时，才插入\n\n#### 3. 遍历\n\n- for\nfor (const int&s : a){\n\n}\n- const_iterator\n// cbegin() cend()\n\n#### 4. 删除\n\n- .erase(key) 返回删除数量\n\n#### 5. 查找\n\n- find(key) 返回指向key的迭代器\n\t\t\t返回xxx.end()\n- count(key) 返回个数\n- lower_bound(k) 第一个不小于key的元素\n- upper_bound(k) 第一个大于key的元素\n- equal_range(k) 返回迭代器pair，表示关键字等于k的元素的范围，若k不存在，就都等于end() **multi类**"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cixq8wbjaco0",
                                    "created": 1648696822723,
                                    "text": "map类",
                                    "font-weight": "bold",
                                    "priority": 2,
                                    "note": "#### 1. 初始化\n\n- 默认 map<int> s1;\n- 列表初始化 map<int> s2 = {\n{1, 2}, {3, 4}};\n\n#### 2. 添加\n\n- .insert(pair<t1, t2>(k, val));\n- a[key] = value; 无论是否存在\n- .emplace(pair<t1, t2>(k, val));\n- .emplace(k, v);\n\n#### 3. 删除\n\n- .erase(key)\n\n#### 4. 遍历\n\n- for\nfor (const pair<int, int> k : b){\n\tcout << k.first << k.second;\n}\n- const_iterator\n// cbegin(), cend()\n\n#### 5. 查找\n\n- find(key) 返回指向key的迭代器\n\t\t\t返回xxx.end()\n- count(key) 返回个数\n- lower_bound(k) 第一个不小于key的元素\n- upper_bound(k) 第一个大于key的元素\n- equal_range(k) 返回迭代器pair，表示关键字等于k的元素的范围，若k不存在，就都等于end() **multi类**"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "cixqtpkukd40",
                                            "created": 1648698453696,
                                            "text": "pair",
                                            "priority": 3,
                                            "font-weight": "bold",
                                            "note": "不能改变key，可以改变value\n1. utility\n2. 初始化\n- pair<T1, T2> p1;\n- pair<T1, T2> p2(v1, v2);\n- pair<T1, T2> p2 = {v1, v2};\n- make_pair(v1, v2) 返回一个pair\n3. 访问\n- first\n- second\n4. 关系运算\n- > < >= <= == !=  "
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cixppgd2k140",
                            "created": 1648695299069,
                            "text": "迭代器",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "#### 1. 插入迭代器\n- back_inserter\n- front_inserter\n- inserter\n\n#### 2. 流迭代器\n- istream_iterator(懒惰求值)\n- ostream_iterator(++ * =)\n\n#### 3. 反向迭代器\n- reverse_iterator\n\n#### 4. 移动迭代器"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "ciw1k7ehyv40",
                    "created": 1648525621149,
                    "text": "类",
                    "priority": 1,
                    "font-weight": "bold",
                    "expandState": "expand",
                    "note": "## 1. struct\n\n## 2. class"
                },
                "children": [
                    {
                        "data": {
                            "id": "cizeux0qx1k0",
                            "created": 1648867814854,
                            "text": "拷贝构造函数",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "### 1. 拷贝构造函数\n\n- 第一个参数是自身类型的引用，其他任何参数都要右默认值\n```c++\nclass t(){\npublic:\n\tt();\n   \tt(const t&);\nprivate:\n\tint val;\n};\nt::t(const t& t1){\n\tval = t1.val;\n}\n```\n\n### 2. 合成拷贝构造函数\n\n- 如果没有定义，编译器也会合成一个拷贝构造函数\n- 编译器从给定对象中依次将每个非static成员拷贝到正在创建对象中\n- 内置类型，直接拷贝；而数组也会逐个元素拷贝\n- 显式要求=default;\n- 隐式为inline的\n\n#### 3. 拷贝赋值运算符\n\n- 重载运算符\n```c++\nclass a{\npublic:\n\ta& operator=(const a& rhs);\nprivate:\n\tint val;\n};\na& a::operator=(const a& rhs){\n\tval = rhs.val;\n    return *this;\n}\n```\n\n#### 4. 合成拷贝赋值运算符\n\n- 编译器从给定对象中依次将每个非static成员拷贝到正在创建对象中\n- 返回一个指向左侧运算对象的引用\n\n### 5. 注意事项\n\n- 如果没有移动构造函数，右值也会被拷贝\n",
                            "expandState": "collapse"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cizf92k2p3c0",
                                    "created": 1648868924005,
                                    "text": "直接/拷贝初始化",
                                    "font-weight": "bold",
                                    "priority": 3,
                                    "note": "#### 1. 直接初始化\n\n- 选择最匹配的构造函数初始化\n\n#### 2. 拷贝初始化\n\n- 将右侧运算对象拷贝到正在创建的对象中(可以进行类型转换)\n\n\n- "
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cizke8exq800",
                                    "created": 1648883434125,
                                    "text": "阻止拷贝",
                                    "font-weight": "bold",
                                    "priority": 3,
                                    "note": "xxx(const xxx&) = delete;\nxxx& operator=(const xxx&) = delete;\n\n- private声明函数阻止拷贝，但是友元和成员函数还是可以进行拷贝(不能ding'yi)"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cizj048ccrc0",
                            "created": 1648879506811,
                            "text": "析构函数",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "#### 1. 概念\n\t\n- 唯一的，无参数的，无返回值的\n- 先执行函数体，然后销毁成员(按初始化顺序的逆序销毁)\n- **隐式销毁一个内置指针类型的成员不会删除它指向的对象；但是智能指针成员在析构阶段会被自动销毁**\n- 当指向一个对象的引用或指针离开作用域时，析构函数不会执行\n\n#### 2. 析构函数\n\n```c++\nclass b{\npublic:\n\t~b(){\n    \tdelete a;\n   }\nprivate:\n\tint *a = new int(6);\n};\n```\n\n#### 3. 合成析构函数\n\n- 如果没有定义析构函数，编译器会定义一个合成析构函数\n- 显式要求=default;\n- 隐式为inline的\n- **析构函数自身并不直接销毁成员，在整个对象销毁过程中，析构函数体是作为成员销毁步骤之外的另一部分而进行的**\n\n",
                            "expandState": "collapse"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cizkflxkd8o0",
                                    "created": 1648883541914,
                                    "text": "阻止析构",
                                    "priority": 3,
                                    "font-weight": "bold",
                                    "note": "~xxx() = delete;\n\n- 编译器将不允许定义该类型的变量或创建该类型的临时对象\n- 可以动态分配这种类型的对象，但是不能释放这些对象\n- private声明函数阻止析构，但是友元和成员函数还是可以进行析构(不能定义)"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cizm8mvnyog0",
                            "created": 1648888637646,
                            "text": "移动构造函数",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "### 1. 移动构造函数\n\n- 第一个参数是自身类型的引用(右值)，其他任何参数都要右默认值\n```c++\nclass c{\npublic:\n\tc(c&&) noexcept;\nprivate:\n\tint val;\n}\nc::c(c&& a) : val(a.val) noexcept \n{}\n```\n\n#### 2. 移动赋值运算符\n\n```c++\nclass c{\npublic:\n\tc& operator(c&&rhs) noexcept;\nprivate:\n\tint val;\n}\nc& c::operator(c&&rhs) noexcept\n{\t\n\t// 检测自赋值\n\tif (this != &rhs){\n    \t// 释放已有元素\n        free();\n        // 接管资源\n        val = rhs.val;\n        // 置于可析构状态\n        xxx = nullptr;\n    }\n    return *this;\n}\n```\n\n#### 3. 合成的移动操作\n\n1. 如果一个类定义了自己的拷贝构造函数，拷贝赋值运算符或者析构函数，编译器就不会为它合成移动构造函数和移动赋值运算符\n\n2. 只有当一个类没有任何自己版本的拷贝控制成员，且类的每个非static数据成员都可以移动，编译器才会为它合成移动构造函数或移动赋值运算符\n\n3. 可以使用=default显式删除\n\n4. 和合成的拷贝构造函数和拷贝赋值运算符是互斥存在的\n\n#### 4. 移动迭代器\n\nvector<int> a = {1, 2};\nvector<int> b(\nmake_move_iterator(a.begin()),\nmake_move_iterator(a.begin()));\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cj3my5sz4dc0",
                                    "created": 1649296877773,
                                    "text": "引用限定符",
                                    "font-weight": "bold",
                                    "priority": 3,
                                    "note": "// 必须放在最后面，表明只能像可修改的左值赋值\nFoo &operator(const Foo&) &;\n// 类似const，只限于非static成员，并且可以区分重载\n// 如果一个成员函数有引用限定符，则具有相同参数列表的所有版本都必须有引用限定符"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cj3n5nf4pt40",
                            "created": 1649297464668,
                            "text": "函数重载",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "**1. 除开:: .\\* . ? : 等符号不能重载外，其他大部分都可以**\n\n**2. 注意成员函数，非成员函数**\n\n- = [] () -> 必须是成员\n- 复合赋值，一般是成员\n- 改变成员自身的，递增，递减，解引用等，通常是成员\n- 算术、相等性、关系、位运算等非成员(对称性)"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cj3rqvvw4dc0",
                                    "created": 1649310413182,
                                    "text": "++/--前后置？",
                                    "priority": 3,
                                    "note": "1. 前置\n\n- Te operator++();\n- Te operator--();\n\n2. 后置\n\n- 多一个不会使用的int参数\n- Te operator++(int)\n- Te operator--(int)"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cj3sbqun3aw0",
                                    "created": 1649312047870,
                                    "text": "类型转换运算符",
                                    "font-weight": "bold",
                                    "priority": 3,
                                    "note": "// 不允许转换成函数或数组类型，但允许转换成指针或者引用类型\noperator type() const;\n\n// 显式的类型转换\n// 如果表达式被用作条件，则编译器会将显式的类型转换自动应用于它\nexplicit operator type() const;\n\n// 如果类中包含一个或多个类型转换，则必须确保再类类型和目标类型之间只存在唯一一种转换类型"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cixp6c0g4600",
                    "created": 1648693800679,
                    "text": "lambda",
                    "font-weight": "bold",
                    "priority": 1,
                    "note": "[capture list]\\(parameter list) -> return type {}\n\n#### 1. capture list\n- 可以捕获所在函数的变量\n- 在创建时拷贝的\n[val] 值，就只能读\n[&val] 引用，可以改变值\n[ptr] 指针，可以改变值\n**隐式捕获**\n- [=] 告诉编译器用值捕获\n- [&] 告诉编译器引用捕获\n\n#### 2. parameter list\n- 参数列表\n\n#### 3. return type\n- 默认void\n- 和函数一样，不能返回引用\n\n#### 4. {}"
                },
                "children": [
                    {
                        "data": {
                            "id": "cj3rxngb5pc0",
                            "created": 1649310943375,
                            "text": "函数对象",
                            "priority": 2,
                            "font-weight": "bold",
                            "note": "1. lambda\n\n```c++\n[sz](const string &s) const -> bool {\n\treturn s.szie() >= sz;\n}\n```\n\n2. 产生的类\n\n```c++\nclass SizeComp{\npublic:\n\tSizeComp(size_t n) : sz(n){}\n    bool operator()(\n    \tconst string &s) const{\n       \treturn s.size() > sz;\n        }\nprivate:\n\tsize_t sz;\n}\n\n```\n\n3. 标准库定义了一些函数对象\n\n- less<Type>\n- greater<Type>  ...\n\n4. function类型\n\n- 创建一个可以调用的对象\n- lambda function 函数对象，函数指针等\n\tfunction<T> f;\n"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cixvc94xwls0",
                    "created": 1648711191265,
                    "text": "动态内存",
                    "font-weight": "bold",
                    "priority": 1,
                    "expandState": "collapse"
                },
                "children": [
                    {
                        "data": {
                            "id": "cixvgqj7nko0",
                            "created": 1648711542590,
                            "text": "new/delete",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "- new 分配空间，并返回地址\nint \\*i = new int(0);\n// 动态数组非数组类型，不能begin().\n// 当初始化器数目大于元素数目，则new表达式失败，不分配内存，bad_array_new_length\nint \\*a = new int[20];\nconst int \\*b = new const int(1); \n- delete 释放该空间\ndelete i;\n- delete[] 释放数组类\ndelete [] a;\n\n- eg: 当内存分配光时，\n\t无法分配会抛出bad_alloc异常\n\n//nothrow一旦分配失败，返回nullptr\nint \\*p2 = new (nothrow) int;\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cixy6xqu0ts0",
                            "created": 1648719237976,
                            "text": "allocator",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "1. 初始化\n- allocator<T> a;\n\n2. 分配\n- 分配n个未初始化T类型对象\na.allocate(n);\n- args构造p指向内存的对象\na.construct(p, args);\n\n3. 释放\n- 释放p指向的内存下的n个T对象\n- p为T*指针\na.deallocate(p, n);\n- 对p指向的对象执行析构函数\na.destory(p);"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cixvn9quo000",
                            "created": 1648712054595,
                            "text": "shared_ptr",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "#### 1. 初始化\n\n- 默认\nshared_ptr<int> p1;\n\n- make_shared 初始化\nshared_ptr<int> p2 = make_shared<int>(6);\n// 其他类型()拥有类似emplace的操作\n\n- 使用new 必须直接初始化才行\nshared_ptr<int> p3(new int(16));\nshared_ptr<int> p4(p3);\nshared_ptr<int> p5(u);\n\n- q内置指针(接管控制权) \n- d代替delete的可调用对象\nshared_ptr<int> p6(q, d);\n\n#### 2. 操作\n- .get() 获取指针\n- .swap(q) 交换指针\n\n#### 3. 特殊操作\n\n- p.unique() p.use_count() == 1?\n- p.use_count() 返回共享对象的智能指针数量(很慢)\n- p = q; 赋值(同类型)\n\n#### 4. 释放\n\n// 当p唯一指向对象时，就释放对象\n- p.reset() = nullptr\n- p.reset(q) = q\n- p.reset(q, d) = q"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cixx3k848iw0",
                            "created": 1648716152344,
                            "text": "unique_ptr",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "#### 1. 初始化\n\n- 默认\nunique_ptr<int> p1;\n- 只支持new，不支持拷贝，赋值\nunique_ptr<int> p2(new int(1));\n- 设置销毁器\nunique_ptr<T, D> u;\nunique_ptr<T, D> u(d);\n\n#### 2. 操作\n\n- .get() 获取指针\n- .swap(q) 交换指针\n\n#### 3. 销毁\n\n- u = nullptr;\n- u.release(); => nullptr\n- u.reset();\n- u.reset(nullptr);\n- u.reset(q);\n\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cixxww3gjjk0",
                            "created": 1648718450744,
                            "text": "weak_ptr",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "1. **不控制所指向对象生存期的智能指针**\n2. **绑定shared_ptr不会影响其引用计数**\n#### 1. 初始化\n\n- weak_ptr<T> w;\n- weak_ptr<T> w(sp);\n// 赋值\n- w = p;\n\n#### 2. 销毁\n\n- w.reset()\n- w.use_count() 与w共享对象的shared_ptr的数量\n- w.expired() 若w.use_count() == 0\n- w.lock() if w.expired() 返回空的shared_ptr, 否则返回一个指向w的对象的shared_ptr"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cixxqeq24io0",
                            "created": 1648717942744,
                            "text": "注意事项",
                            "priority": 1,
                            "font-weight": "bold",
                            "note": "1. 不能使用相同的内置指针值初始化(或reset)多个智能指针\n2. 不delete get() 返回的指针\n3. 不适用get()初始化或reset另一个智能指针\n4. 当使用get()获取指针，牢记当最后一个对应的智能指针销毁后，指针失效\n5. 如果使用智能指针管理的资源不是new分配的内存，必须传递一个删除器"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cizlte90r0w0",
                    "created": 1648887443400,
                    "text": "右值引用",
                    "font-weight": "bold",
                    "priority": 1,
                    "note": "#### 1. 右值\n\n1. 绑定到右值的引用&&(只能绑定到一个将要销毁的对象)\n2. 与左值引用相比，右值引用可以绑定到表达式中，但不能将一个右值引用直接绑定到一个左值上\n× int &&j = i;\n√ int &&j = i * 42;\n3. 可以将一个const的引用绑定到一个右值上\nconst int &i = i * 42;\n3. 左值持久，右值短暂\n- 右值可以字面常量，表达式求值过程中创建的临时对象\n- 变量是左值，因此不能将一个右值引用直接绑定到一个变量上，即使这个变量是右值引用类型也不行\n\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cizm4lwf0yg0",
                            "created": 1648888322058,
                            "text": "std::move()",
                            "font-weight": "bold",
                            "priority": 2,
                            "note": "1. 调用这个函数，可以获得绑定在左值上的右值引用\n=> 对于调用的左值，除了赋值和销毁外，不能再使用它了。"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "fresh-blue",
    "version": "1.4.43"
}